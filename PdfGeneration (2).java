package com.xtremesoftech.eims.lessonplanning.pdfgeneration;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfAction;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.xtremesoftech.eims.lessonplanning.model.Assignment;
import com.xtremesoftech.eims.lessonplanning.model.LessonAssignments;
import com.xtremesoftech.eims.lessonplanning.model.LessonDetails;
import com.xtremesoftech.eims.lessonplanning.model.LessonOutcome;
import com.xtremesoftech.eims.lessonplanning.model.LessonPlan;
import com.xtremesoftech.eims.lessonplanning.model.MainLearning;;
public class PdfGeneration {
	private  String FILE = "D:/pdfgeneration/SecondPdf.pdf";


	public  void generatePdf(LessonPlan lplan) {

		Date date = Calendar.getInstance().getTime();  
		DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy ");  
		String strDate = dateFormat.format(date); 
		try {
			Document document = new Document();
			PdfWriter.getInstance(document, new FileOutputStream(FILE));
			document.open();
			addMetaData(document);
			addTitlePage(document);
			addContent(document,lplan,strDate);
			document.close();
			document.close();
			System.out.println("Pdf Generated");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	private  void addTitlePage(Document document)
			throws DocumentException {
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph(" Lesson Plan"));

		//       addEmptyLine(preface, 1);
		//       // Will create: Report generated by: _name, _date
		//       preface.add(new Paragraph(
		//               "Report generated by: " + System.getProperty("user.name") + ", " + new Date() ));
		//       addEmptyLine(preface, 1);
		preface.add(new Paragraph(
				" "
				));

		addEmptyLine(preface, 1);

		document.add(preface);
		// Start a new page
		//       document.newPage();
	}
	private void addMetaData(Document document) {
		// TODO Auto-generated method stub

	}
	private  void addContent(Document document ,LessonPlan lplan,String strDate) throws IOException, DocumentException {
		// TODO Auto-generated method stub
		createPdf(document,lplan,strDate);
		createPage2Pdf(document,lplan,strDate);

	}
	public   void createPdf(Document document,LessonPlan lplan,String strDate) throws IOException, DocumentException {

		// I see 3 columns in your example
		PdfPTable table = new PdfPTable(6);
		// The first column appears to have double the width of the other columns
		table.setWidths(new int[]{ 1,1,1,1, 1, 1});
		table.setWidthPercentage(100);
		float cellHeight = 30.4f;
		
		// the first row consists of 1 cell that spans the 3 columns
		table.addCell(newPCell("Teacher",1,cellHeight));
		table.addCell(newPCell(lplan.getLessonInfo().getTeacher(),2,cellHeight));
		table.addCell(newPCell("Date",1,cellHeight));
		table.addCell(newPCell(strDate,2,cellHeight));

		// Then follows a row with normal cells
		table.addCell(newPCell("Class",1,cellHeight));
		table.addCell(newPCell(lplan.getLessonInfo().getClassName(),2,cellHeight));
		table.addCell(newPCell("Subject",1,cellHeight));
		table.addCell(newPCell(lplan.getLessonInfo().getSubject(),2,cellHeight));
		
		//Topics
		table.addCell(newPCell("Topic",1,cellHeight));
		table.addCell(newPCell(lplan.getLessonInfo().getTopic(),5,cellHeight));

		table.addCell(newPCell("Term",1,cellHeight));
		table.addCell(newPCell(lplan.getLessonInfo().getTerm(),1,cellHeight));

		table.addCell(newPCell("Start Day",1,cellHeight));
		table.addCell(newPCell(lplan.getLessonInfo().getDurationFrom(),1,cellHeight));
		
		table.addCell(newPCell("End Day",1,cellHeight));
		table.addCell(newPCell(lplan.getLessonInfo().getDurationTo(),1,cellHeight));
		

		table.addCell(newPCell("Key Vocabulary",1,cellHeight*4));
		table.addCell(newPCell(lplan.getLessonInfo().getKeyVocabulary(),5,cellHeight*4));

		table.addCell(newPCell("Resources",1,cellHeight*4));
		table.addCell(newPCell(lplan.getLessonInfo().getResources(),5,cellHeight*4));

		// now we can add the table
		document.add(table);
		//// Lesson Outcomes
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Lesson Outcome"));
		preface.setSpacingAfter(10f);
		document.add(preface);

		PdfPTable lessonOutcome = new PdfPTable(2);
		lessonOutcome.setWidths(new int[]{ 1,1});
		lessonOutcome.setWidthPercentage(100);
		// the first row consists of 1 cell that spans the 3 columns
		PdfPCell c1outcomes = new PdfPCell(new Phrase("Description"));
		c1outcomes.setColspan(1);
		c1outcomes.setFixedHeight((float) 30.4);
		lessonOutcome.addCell(c1outcomes);
		PdfPCell c2outcome = new PdfPCell(new Phrase("Assesment"));
		c2outcome.setColspan(1);
		c2outcome.setFixedHeight((float) 30.4);
		lessonOutcome.addCell(c2outcome);
		List<LessonOutcome> outcomes= lplan.getLessonOutcomes().getOutcomes();
		if(outcomes!=null) {
			System.out.println("Otcomes is"+outcomes);
			System.out.println("Lesson Otcomes is"+lplan.getLessonOutcomes());
			System.out.println("Lessonoutcomes.getouttcomes is"+lplan.getLessonOutcomes().getOutcomes());
			///Inserting Dynamic rows
			for (LessonOutcome outcome:outcomes) {

				PdfPCell lessonOutcomeDescriptionCell = new PdfPCell(new Phrase(outcome.getDescription()));
				lessonOutcomeDescriptionCell.setFixedHeight(30.4f);
				lessonOutcome.addCell(lessonOutcomeDescriptionCell);

				PdfPCell lessonOutcomeAssessmentCell = new PdfPCell(new Phrase(outcome.getAssesment()));
				lessonOutcomeAssessmentCell.setFixedHeight(30.4f);
				lessonOutcome.addCell(lessonOutcomeAssessmentCell);
			}
		}
		document.add(lessonOutcome);
		
	}
	private PdfPCell newPCell(String content,int colspan, float height) {
		PdfPCell c1 = new PdfPCell(new Phrase(content));
		c1.setColspan(colspan);
		c1.setFixedHeight(height);
		return c1;
	}
	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
	
	public void createPage2Pdf(Document document,LessonPlan lplan,String strDate) throws DocumentException {
		PdfPTable table = new PdfPTable(12);
		// The first column appears to have double the width of the other columns
		table.setWidths(new int[]{ 1,1,1,1, 1, 1,1,1,1,1, 1, 1});
		table.setWidthPercentage(100);
		Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 10);
		// Lets write a big header
		preface.add(new Paragraph("Main Learning"));
		preface.setSpacingAfter(5f);
		document.add(preface);
		float cellHeight = 50.4f;
		table.addCell(newPCell("Day",1,cellHeight));
		table.addCell(newPCell("Recap Duration",2,cellHeight));
		table.addCell(newPCell("Recap Description",2,cellHeight));
		table.addCell(newPCell("Main Learning Duration",2,cellHeight));
		table.addCell(newPCell("Main Learning Description",5,cellHeight));
		
		List<MainLearning> mainLearnings= lplan.getLessonDetails().getLearnings();
		
		if(mainLearnings!=null) {
//			System.out.println("Otcomes is"+outcomes);
//			System.out.println("Lesson Otcomes is"+lplan.getLessonOutcomes());
//			System.out.println("Lessonoutcomes.getouttcomes is"+lplan.getLessonOutcomes().getOutcomes());
			
			///Inserting Dynamic rows
			for (MainLearning mainLearning:mainLearnings) {

				PdfPCell mainLearningDayCell = new PdfPCell(new Phrase(mainLearning.getDay()));
				mainLearningDayCell.setFixedHeight(30.4f);
				table.addCell(mainLearningDayCell);

				PdfPCell mainLearningRecapDurationCell = new PdfPCell(new Phrase(mainLearning.getRecapDuration()));
				mainLearningRecapDurationCell.setFixedHeight(30.4f);
				table.addCell(mainLearningRecapDurationCell);
				
				PdfPCell mainLearningRecapDescriptionCell = new PdfPCell(new Phrase(mainLearning.getRecapStrategy()));
				mainLearningRecapDescriptionCell.setFixedHeight(30.4f);
				table.addCell(mainLearningRecapDescriptionCell);

				PdfPCell mainLearningLearningDurationCell = new PdfPCell(new Phrase(mainLearning.getLearningDuration()));
				mainLearningLearningDurationCell.setFixedHeight(30.4f);
				table.addCell(mainLearningLearningDurationCell);
				
				PdfPCell mainLearningDescriptionCell = new PdfPCell(new Phrase(mainLearning.getLearningStrategy()));
				mainLearningDescriptionCell.setFixedHeight(30.4f);
				table.addCell(mainLearningDescriptionCell);

				

				
			}
			document.add(table);
		
	}
		
		
        
		
		
		PdfPTable assignmentstable = new PdfPTable(2);
		assignmentstable.setWidths(new int[]{ 1,1});
		assignmentstable.setWidthPercentage(100);
		
		// We add one empty line
		
		Paragraph preface1 = new Paragraph();
		// Lets write a big header
		addEmptyLine(preface1, 4);
		preface1.add(new Paragraph("Assignments"));
		preface1.setSpacingAfter(10f);
		document.add(preface1);
		assignmentstable.addCell(newPCell("Day",1,cellHeight));
		assignmentstable.addCell(newPCell("Description",1,cellHeight));
		List<Assignment> assignments= lplan.getLessonAssignments().getAssignments();
		if(assignments!=null) {
//			System.out.println("Otcomes is"+outcomes);
//			System.out.println("Lesson Otcomes is"+lplan.getLessonOutcomes());
//			System.out.println("Lessonoutcomes.getouttcomes is"+lplan.getLessonOutcomes().getOutcomes());
			///Inserting Dynamic rows
			for (Assignment assignment:assignments) {

				PdfPCell assignmentDayCell = new PdfPCell(new Phrase(assignment.getDay()));
				assignmentDayCell.setFixedHeight(30.4f);
				assignmentstable.addCell(assignmentDayCell);

				PdfPCell assignmnetDescripitionCell = new PdfPCell(new Phrase(assignment.getDescription()));
				assignmnetDescripitionCell.setFixedHeight(30.4f);
				assignmentstable.addCell(assignmnetDescripitionCell);
			}
		
		
	}
	
		document.add(assignmentstable);
	
	}
	
	
}
